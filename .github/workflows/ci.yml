name: CI
on:
  pull_request:
  push:
    branches:
      - main
  workflow_call:

env:
  min_python_version: "3.7"

defaults:
  run:
    shell: bash

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v4.3.0
        with:
          python-version: ${{ env.min_python_version }}
      - uses: pre-commit/action@v3.0.0

  towncrier:
    runs-on: ubuntu-latest
    steps:
    # Fetch main branch for comparison, then check out current branch.
    - uses: actions/checkout@v3.1.0
      with:
        fetch-depth: 0
        ref: main
    - uses: actions/checkout@v3.1.0
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ env.python_version }}
    - run: pip install tox
    - run: tox -e towncrier-check

  package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ env.min_python_version }}
    - run: pip install tox
    - run: tox -e package
    - name: Collect packages
      run: |
        mkdir packages
        mv {.,demo,src/*}/dist/* packages
    - uses: actions/upload-artifact@v3
      with:
        name: packages
        path: packages
        if-no-files-found: error

  core:
    needs: [pre-commit, towncrier, package]
    strategy:
      matrix:
        platform: ['macos', 'ubuntu', 'windows']
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]  #, "3.12.0-alpha - 3.12.0"]
    runs-on: ${{ matrix.platform }}-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install --upgrade tox
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: packages
    - name: Test
      env:
        TOGA_INSTALL_COMMAND: 'bash -c "pip install packages/toga_{core,dummy}*.whl"'
      run: |
        tox -e py
    - if: matrix.platform == 'ubuntu' && matrix.python-version == env.min_python_version
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  backend:
    needs: core
    strategy:
      matrix:
        backend: [android, cocoa, gtk, iOS, web, winforms]
        include:
          - runs-on: ubuntu-latest
          - python-version: "3.7"  # Should be env.min_python_version (https://github.com/actions/runner/issues/480)
          - pre-command:
          - test-command: pytest -v
          - backend: cocoa
            runs-on: macos-latest
          - backend: gtk
            pre-command: "sudo apt-get update -y && sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 python3-dev libgirepository1.0-dev libcairo2-dev pkg-config"
            test-command: "xvfb-run -a -s '-screen 0 2048x1536x24' pytest -v"
          - backend: iOS
            runs-on: macos-latest
          - backend: winforms
            runs-on: windows-latest
            # Py3.9 is the first Python version for which
            # a wheel of pythonnet isn't available on PyPI.
            python-version: "3.9"
    runs-on: ${{ matrix.runs-on }}
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.3.0
      with:
        # Py3.9 is the first Python version for which
        # a wheel of pythonnet isn't available on PyPI.
        python-version: ${{ matrix.python-version }}
    - name: Get packages
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: packages
    - name: Install dependencies
      run: |
        ${{ matrix.pre-command }}
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install pytest-tldr
        python -m pip install packages/toga_{core,dummy,${{ matrix.backend }}}*.whl
    - name: Test
      run: |
        cd src/${{ matrix.backend }}
        TOGA_BACKEND=toga_${{ matrix.backend }} ${{ matrix.test-command }}
